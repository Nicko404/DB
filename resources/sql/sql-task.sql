--task 1

select model, fare_conditions, count(seat_no) from bookings.seats
join bookings.aircrafts_data using(aircraft_code)
group by fare_conditions, model


--task 2

select model, count(seat_no) from bookings.aircrafts_data
join bookings.seats using(aircraft_code)
group by model
order by 2 desc
limit 3


--task 3

select * from bookings.flights
where actual_departure - scheduled_departure >= '02:00:00'


--task 4

select passenger_name, contact_data, fare_conditions from bookings.tickets
join bookings.bookings using(book_ref)
join bookings.ticket_flights using(ticket_no)
where fare_conditions like 'Business'
order by book_date desc
limit 10


--task 5

select flight_no from bookings.flights
join bookings.ticket_flights using(flight_id)
group by flight_no, fare_conditions
having fare_conditions not like 'Business'


--task 6

select airport_name, city from bookings.flights f
join bookings.airports ai on f.departure_airport = ai.airport_code
where actual_departure - scheduled_departure > '00:00:00'
group by airport_name, city


--task 7

select airport_code, count(departure_airport) from bookings.airports a
join bookings.flights f on f.departure_airport = a.airport_code
group by a.airport_code
order by 2


--task 8

select * from bookings.flights
where scheduled_arrival != actual_arrival


--task 9

select aircraft_code, model, seat_no from bookings.aircrafts_data
join bookings.seats using(aircraft_code)
where model::json->>'ru' like '%Аэробус A321-200%' and fare_conditions != 'Economy'
order by seat_no


--task 10

select airport_code, airport_name, city from bookings.airports_data
where city in
(select city from bookings.airports_data
group by city
having count(city) > 1)


--task 11

select passenger_name, sum(total_amount) from bookings.tickets
join bookings.bookings using(book_ref)
group by passenger_name
having sum(total_amount) > (select avg(bookings.total_amount) from bookings.bookings)


--task 12

select flight_id, flight_no, scheduled_departure, scheduled_arrival, departure_airport, arrival_airport, status, aircraft_code, actual_departure, actual_arrival 

from bookings.flights fly

join bookings.airports_data dep on fly.departure_airport = dep.airport_code
join bookings.airports_data arr on fly.arrival_airport = arr.airport_code

where (dep.city::json->>'ru' like '%Екатеринбург%' and arr.city::json->>'ru' like '%Москва%') and status in ('On Time', 'Delayed')

order by scheduled_departure

limit 1


--task 13

select * from bookings.tickets
join bookings.bookings using(book_ref)
where total_amount in 
((select min(total_amount) from bookings.bookings)
union
(select max(total_amount) from bookings.bookings))


--task 14

create table bookings.customer (
id bigint primary key generated by default as identity,
first_name varchar(40) not null,
last_name varchar(40) not null,
email varchar(50) not null,
phone varchar(13) not null,
constraint q_email unique(email)
)


--task 15

create table bookings.orders (
id bigint primary key generated by default as identity,
customer_id bigint not null,
quantity integer,
constraint fk_customer foreign key(customer_id) references customer(id)
)


--task 16

insert into bookings.customer (first_name, last_name, email, phone) values
('First name 1', 'Last name 1', 'some@email.com1', '+375325646612'),
('First name 2', 'Last name 2', 'some@email.com2', '+375325646612'),
('First name 3', 'Last name 3', 'some@email.com3', '+375325646612'),
('First name 4', 'Last name 4', 'some@email.com4', '+375325646612'),
('First name 5', 'Last name 5', 'some@email.com5', '+375325646612')


--task 17

drop schema bookings cascade
